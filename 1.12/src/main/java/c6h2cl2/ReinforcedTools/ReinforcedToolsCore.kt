package c6h2cl2.ReinforcedTools

import c6h2cl2.ReinforcedTools.client.ClientProxy
import c6h2cl2.ReinforcedTools.common.CommonProxy
import c6h2cl2.ReinforcedTools.event.FOVEvent
import net.minecraft.block.Block
import net.minecraft.block.state.IBlockState
import net.minecraft.init.Blocks
import net.minecraft.item.ItemStack
import net.minecraftforge.common.MinecraftForge
import net.minecraftforge.common.config.Configuration
import net.minecraftforge.fml.common.Mod
import net.minecraftforge.fml.common.ModMetadata
import net.minecraftforge.fml.common.SidedProxy
import net.minecraftforge.fml.common.event.FMLInitializationEvent
import net.minecraftforge.fml.common.event.FMLPreInitializationEvent
import java.io.File

/**
 * @author C6H2Cl2
 */

@Mod(modid = ReinforcedToolsCore.Domain,version = ReinforcedToolsCore.Version,name = ReinforcedToolsCore.ModID,useMetadata = true,dependencies = "required-after:yukarilib@[1.3,)")
class ReinforcedToolsCore {
    companion object{
        const val ModID = "ReinforcedTools"
        const val Domain = "reinforcedtools"
        const val Version = "2.1.1"
        @Mod.Metadata
        var meta: ModMetadata? = null
        @SidedProxy(clientSide = "c6h2cl2.ReinforcedTools.client.ClientProxy",serverSide = "c6h2cl2.ReinforcedTools.common.CommonProxy")
        var proxy:CommonProxy? = null
        var hardRecipe = false
        private set
        fun isHardRecipe() = hardRecipe
        fun isToolEffective(stack: ItemStack, block:Block, blockState:IBlockState):Boolean{
            return stack.item.getToolClasses(stack).any { ("pickaxe" == it && (block === Blocks.REDSTONE_ORE || block === Blocks.LIT_REDSTONE_ORE || block === Blocks.OBSIDIAN) )||block.isToolEffective(it, blockState) }
        }
    }

    @Mod.EventHandler
    fun preinit(event : FMLPreInitializationEvent) {
        loadMeta()
        getConfig()
        ReinforcedToolsRegistry.preInit(event)
        MinecraftForge.EVENT_BUS.register(ReinforcedToolsRegistry)
    }

    @Mod.EventHandler
    fun init(event : FMLInitializationEvent){
        ReinforcedToolsRegistry.init(event)
        if(event.side.isClient){
            if (proxy is ClientProxy){
                val clientProxy = proxy as ClientProxy
                clientProxy.registerRender()
            }
            //MinecraftForge.EVENT_BUS.register(FOVEvent())
        }
    }

    fun getConfig(){
        val proxy = proxy as CommonProxy
        val cfg = Configuration(File(proxy.getDir(),"config/ReinforcedTools.cfg"))
        cfg.load()
        hardRecipe = cfg.getBoolean("EnableHardRecipe","Recipes",false,"Enable hard recipe.")
        cfg.save()
    }

    fun loadMeta(){
        val meta = meta as ModMetadata
        meta.modId = Domain
        meta.name = ModID
        meta.version = Version
        meta.authorList.add("C6H2Cl2")
        meta.description = "Add some tools better than vanilla."
        meta.autogenerated = false
    }
}