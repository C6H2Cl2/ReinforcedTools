package net.toliner.reinforcedtools

import net.minecraft.creativetab.CreativeTabs
import net.minecraft.item.Item
import net.minecraft.item.ItemStack
import net.minecraftforge.fml.common.*
import net.minecraftforge.fml.common.event.FMLConstructionEvent
import net.minecraftforge.fml.common.event.FMLInitializationEvent
import net.minecraftforge.fml.common.event.FMLPostInitializationEvent
import net.minecraftforge.fml.common.event.FMLPreInitializationEvent
import net.minecraftforge.fml.relauncher.Side
import net.toliner.korgelin.Korgelin
import net.toliner.reinforcedtools.ReinforcedTools.DEPENDENCIES
import net.toliner.reinforcedtools.ReinforcedTools.KOTLIN_ADAPTER
import net.toliner.reinforcedtools.ReinforcedTools.MOD_ID
import net.toliner.reinforcedtools.ReinforcedTools.MOD_NAME
import net.toliner.reinforcedtools.ReinforcedTools.MOD_VERSION
import net.toliner.reinforcedtools.item.ItemReinforcedAxe
import net.toliner.reinforcedtools.item.ItemReinforcedHoe
import net.toliner.reinforcedtools.item.ItemReinforcedPickaxe
import net.toliner.reinforcedtools.item.ItemReinforcedShovel
import java.lang.reflect.Field
import java.lang.reflect.Method

/**
 * @author kojin15.
 */
@Mod(modid = MOD_ID, name = MOD_NAME, version = MOD_VERSION, acceptedMinecraftVersions = "[1.12.2]",
        modLanguage = "kotlin", modLanguageAdapter = KOTLIN_ADAPTER, dependencies = DEPENDENCIES,
        useMetadata = true)
object ReinforcedTools {
    const val MOD_ID = "reinforcedtools"
    const val MOD_NAME = "ReinforcedTools"
    const val MOD_VERSION = "3.0.0"

    const val KOTLIN_ADAPTER = "net.toliner.korgelin.KotlinAdapter"
    const val DEPENDENCIES = "required-after:${Korgelin.MOD_ID};"

    @Mod.Metadata
    private lateinit var METADATA: ModMetadata

    @SidedProxy(clientSide = "net.toliner.reinforcedtools.proxy.ClientProxy",
            serverSide = "net.toliner.reinforcedtools.proxy.ServerProxy")
    lateinit var PROXY: CommonProxy

    @Mod.EventHandler
    fun construct(event: FMLConstructionEvent) {
        METADATA.modId = MOD_ID
        METADATA.name = MOD_NAME
        METADATA.version = MOD_VERSION
        METADATA.authorList.add("toliner")
        METADATA.authorList.add("kojin15")
        METADATA.description = "Add some tools better than vanilla."
        METADATA.autogenerated = false
    }

    @Mod.EventHandler
    fun preInit(event: FMLPreInitializationEvent) {
        PROXY.preInit()
    }

    @Mod.EventHandler
    fun init(event: FMLInitializationEvent) {
        PROXY.init()
    }

    @Mod.EventHandler
    fun postInit(event: FMLPostInitializationEvent) {
        PROXY.postInit()
    }

    val tabReinforcedTools = object : CreativeTabs(MOD_NAME) {
        override fun getTabIconItem(): ItemStack = ItemStack.EMPTY
    }

    object Items {
        val reinforcedAxe = Item.ToolMaterial.values().map { ItemReinforcedAxe(it) }
        val reinforcedHoe = Item.ToolMaterial.values().map { ItemReinforcedHoe(it) }
        val reinforcedPickaxe = Item.ToolMaterial.values().map { ItemReinforcedPickaxe(it) }
        val reinforcedShovel = Item.ToolMaterial.values().map { ItemReinforcedShovel(it) }
    }
}

class KotlinAdapter : ILanguageAdapter {
    override fun supportsStatics(): Boolean = false

    override fun setProxy(target: Field, proxyTarget: Class<*>, proxy: Any) {
        target.set(proxyTarget.kotlin.objectInstance, proxy)
    }

    override fun getNewInstance(container: FMLModContainer, objectClass: Class<*>, classLoader: ClassLoader, factoryMarkedAnnotation: Method?): Any? {
        return objectClass.kotlin.objectInstance ?: objectClass.newInstance()
    }

    override fun setInternalProxies(mod: ModContainer?, side: Side?, loader: ClassLoader?) = Unit
}